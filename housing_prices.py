# -*- coding: utf-8 -*-
"""housing prices.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yEa039P8H0UPNcEEH30n8d8Ewcmmd7QK

# Mengimpor library yang diperlukan
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Menyiapkan plotting untuk keperluan analisis
sns.set(style="whitegrid")

# Menampilkan versi library untuk memastikan kompatibilitas
print(f"Pandas Version: {pd.__version__}")
print(f"NumPy Version: {np.__version__}")

"""# Memuat dataset"""

file_url = 'https://raw.githubusercontent.com/ageron/handson-ml/master/datasets/housing/housing.csv'
dataset = pd.read_csv(file_url)

"""# Menampilkan 5 baris pertama dataset"""

dataset.head()

"""# Menampilkan dataset"""

# Informasi tentang dataset
dataset.info()

# Statistik deskriptif
dataset.describe()

# Menampilkan jumlah nilai yang hilang di setiap kolom
print("Jumlah nilai yang hilang:")
print(dataset.isnull().sum())

"""# Visualisasi distribusi target (median_house_value)"""

plt.figure(figsize=(8, 5))
sns.histplot(dataset['median_house_value'], bins=50, kde=True)
plt.title("Distribusi Nilai Median Rumah")
plt.xlabel("Median House Value")
plt.ylabel("Frekuensi")
plt.show()

"""# Korelasi antara fitur"""

plt.figure(figsize=(10, 8))
# Calculate correlation only for numeric features
numeric_data = dataset.select_dtypes(include=np.number)
sns.heatmap(numeric_data.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Matriks Korelasi")
plt.show()

"""# Membersihkan data"""

# Mengisi nilai yang hilang dengan median
dataset['total_bedrooms'] = dataset['total_bedrooms'].fillna(dataset['total_bedrooms'].median())

# Memeriksa kembali nilai yang hilang
print("Jumlah nilai yang hilang setelah pembersihan:")
print(dataset.isnull().sum())

"""Dalam dataset "California Housing Prices", kolom ocean_proximity adalah variabel kategorikal yang perlu diubah menjadi format numerik (encoding)."""

# Encoding kolom kategorikal 'ocean_proximity' menggunakan One-Hot Encoding
encoded_data = pd.get_dummies(dataset, columns=['ocean_proximity'], drop_first=True)

# Memeriksa dataset setelah encoding
print(encoded_data.head())

"""## Proses Scaling"""

from sklearn.preprocessing import StandardScaler

# Menyalin dataset untuk proses scaling
scaled_data = encoded_data.copy()

# Inisialisasi StandardScaler
scaler = StandardScaler()

# Identifikasi kolom numerik untuk scaling
numerical_features = ['longitude', 'latitude', 'housing_median_age',
                      'total_rooms', 'total_bedrooms', 'population',
                      'households', 'median_income']

# Menerapkan scaling pada kolom numerik
scaled_data[numerical_features] = scaler.fit_transform(scaled_data[numerical_features])

# Memastikan data telah di-scale
print(scaled_data[numerical_features].head())

"""# Pembagian data"""

# Memisahkan fitur dan target setelah scaling
X = scaled_data.drop('median_house_value', axis=1)
y = scaled_data['median_house_value']

# Membagi dataset menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Menampilkan ukuran data latih dan data uji
print(f"Jumlah data latih: {len(X_train)}")
print(f"Jumlah data uji: {len(X_test)}")

"""# Linear regression

* Melatih model regresi linier dengan data latih.

"""

# Membuat model Linear Regression
model = LinearRegression()
model.fit(X_train, y_train)

# Membuat model Linear Regression
model = LinearRegression()
model.fit(X_train, y_train)

# Prediksi pada data uji
y_pred = model.predict(X_test)

# Menghitung metrik evaluasi
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Menampilkan hasil evaluasi
print(f"Linear Regression Evaluation Metrics:")
print(f"Mean Absolute Error: {mae}")
print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

"""## Random Forest"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Inisialisasi model Random Forest
rf_model = RandomForestRegressor(random_state=42)
rf_model.fit(X_train, y_train)

# Prediksi pada data uji
y_pred_rf = rf_model.predict(X_test)

# Evaluasi model
rf_mae = mean_absolute_error(y_test, y_pred_rf)
rf_mse = mean_squared_error(y_test, y_pred_rf)
rf_r2 = r2_score(y_test, y_pred_rf)

# Menampilkan hasil evaluasi
print(f"Random Forest Regressor Evaluation Metrics:")
print(f"Mean Absolute Error (MAE): {rf_mae}")
print(f"Mean Squared Error (MSE): {rf_mse}")
print(f"R-squared (R^2): {rf_r2}")

"""## Hasil perbandingan nilai aktual dengan Linear regression dan Random forest regressor"""

import pandas as pd

# Contoh data hasil prediksi
# Ganti dengan nilai aktual dan prediksi model Anda
actual_values = y_test[:5].tolist()  # Nilai aktual dari data uji (contoh: gunakan y_test)
linear_regression_preds = model.predict(X_test[:5])  # Prediksi dari Linear Regression
random_forest_preds = rf_model.predict(X_test[:5])  # Prediksi dari Random Forest Regressor

# Membuat DataFrame untuk menampilkan hasil
predictions_df = pd.DataFrame({
    'Nilai Aktual': actual_values,
    'Linear Regression Predictions': linear_regression_preds,
    'Random Forest Predictions': random_forest_preds
})

# Menampilkan tabel hasil
predictions_df.head()

"""# Ploting hasil prediksi dan nilai aktual"""

# Membandingkan hasil prediksi dengan nilai aktual
plt.figure(figsize=(8, 5))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.title("Prediksi vs Aktual")
plt.xlabel("Nilai Aktual")
plt.ylabel("Prediksi")
plt.show()